(window.webpackJsonp=window.webpackJsonp||[]).push([[14],{486:function(s,t,e){"use strict";e.r(t);var n=e(29),a=Object(n.a)({},(function(){var s=this,t=s.$createElement,e=s._self._c||t;return e("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[e("h1",{attrs:{id:"使用-typescript-重构-axios"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#使用-typescript-重构-axios"}},[s._v("#")]),s._v(" 使用 Typescript 重构 axios")]),s._v(" "),e("p",[s._v("Axios 是一个基于 "),e("code",[s._v("promise")]),s._v(" 网络请求库，作用于"),e("code",[s._v("node.js")]),s._v(" 和浏览器中。 它是 isomorphic 的(即同一套代码可以运行在浏览器和"),e("code",[s._v("node.js")]),s._v("中)。在服务端它使用原生 node.js "),e("code",[s._v("http")]),s._v(" 模块, 而在客户端 (浏览端) 则使用 "),e("code",[s._v("XMLHttpRequests")]),s._v("。\n")]),s._v(" "),e("h2",{attrs:{id:"前言"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#前言"}},[s._v("#")]),s._v(" 前言")]),s._v(" "),e("p",[s._v("检验学习成果最直接的方式就是造论子。  \n最近刚换工作，项目使用的是"),e("code",[s._v("TypeScript")]),s._v("。学习之后，干脆造个轮子。网上看到很多"),e("code",[s._v("axios")]),s._v("相关的轮子，使用"),e("code",[s._v("TypeScript")]),s._v("造一个"),e("code",[s._v("axios")]),s._v("的轮子。"),e("br"),s._v("\n首先选择了"),e("code",[s._v("vue3 + TypeScript")]),s._v("，方便写客户端代码，用来测试客户端返回接口。")]),s._v(" "),e("h2",{attrs:{id:"特性"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#特性"}},[s._v("#")]),s._v(" 特性")]),s._v(" "),e("ul",[e("li",[s._v("从浏览器创建 "),e("code",[s._v("XMLHttpRequests")])]),s._v(" "),e("li",[s._v("从 node.js 创建 "),e("code",[s._v("http")]),s._v(" 请求")]),s._v(" "),e("li",[s._v("支持 "),e("code",[s._v("Promise")]),s._v(" API")]),s._v(" "),e("li",[s._v("拦截请求和响应")]),s._v(" "),e("li",[s._v("转换请求和响应数据")]),s._v(" "),e("li",[s._v("取消请求")]),s._v(" "),e("li",[s._v("自动转换 JSON 数据")]),s._v(" "),e("li",[s._v("客户端支持防御 "),e("code",[s._v("XSRF")])])]),s._v(" "),e("h2",{attrs:{id:"快速跳转"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#快速跳转"}},[s._v("#")]),s._v(" 快速跳转")]),s._v(" "),e("ul",[e("li",[s._v("使用Typescript重构Axios "),e("RouterLink",{attrs:{to:"/pages/1fda4a/"}},[s._v("链接")])],1),s._v(" "),e("li",[s._v("使用Typescript重构Axios--实现基础（一） "),e("RouterLink",{attrs:{to:"/pages/7feef0/"}},[s._v("链接")])],1),s._v(" "),e("li",[s._v("使用Typescript重构Axios--处理GET请求的URL参数（二） "),e("RouterLink",{attrs:{to:"/pages/518c20/"}},[s._v("链接")])],1)]),s._v(" "),e("h2",{attrs:{id:"项目目录"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#项目目录"}},[s._v("#")]),s._v(" 项目目录")]),s._v(" "),e("p",[s._v("项目分为客户端（vue部分）和服务端（server 文件夹）。客户端主要是用来检验重构功能的 demo，采用 TypeScript 按照模块化进行编写；服务端是用来响应 demo 中发出的请求，采用 koa 编写。  \n目录结构：")]),s._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("ts-axios\n├─ .browserslistrc\n├─ .eslintrc.js\n├─ .gitignore\n├─ babel.config.js\n├─ package-lock.json\n├─ package.json\n├─ public\n│  ├─ favicon.ico\n│  └─ index.html\n├─ README.md\n├─ server\n│  └─ index.ts\n├─ src\n│  ├─ App.vue\n│  ├─ assets\n│  │  └─ logo.png\n│  ├─ axios              // axios文件夹\n│  │  ├─ index.ts        // 入口\n│  │  ├─ types\n│  │  │  └─ index.ts\n│  │  └─ xhr.ts          // ajax\n│  ├─ components\n│  ├─ main.ts\n│  ├─ router\n│  │  └─ index.ts\n│  ├─ shims-vue.d.ts\n│  ├─ store\n│  │  └─ index.ts\n│  └─ views\n│     ├─ AboutView.vue\n│     └─ HomeView.vue\n├─ tsconfig.json\n├─ vue.config.js\n└─ yarn.lock\n")])])]),e("h2",{attrs:{id:"项目运行"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#项目运行"}},[s._v("#")]),s._v(" 项目运行")]),s._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 克隆项目到本地")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" clone https://github.com/2513022260/ts-axios.git\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 进入项目目录")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("cd")]),s._v(" ts-axios\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 安装依赖")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("npm")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("install")]),s._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 打开客户端")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("npm")]),s._v(" run start\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 和服务端")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("npm")]),s._v(" run server\n")])])])])}),[],!1,null,null,null);t.default=a.exports}}]);